#!/usr/bin/env ruby

require 'fileutils'

@path = "#{ENV['HOME']}/downloads/material-design-icons"
@categories = %w( action alert av communication content device editor file hardware image maps nagivation notification social toggle )
@densities = %w( mdpi hdpi xhdpi xxhdpi xxxhdpi )
@colors = %w( white black )
@sizes = %w( 16dp 18dp 24dp 32dp 36dp 48dp )

def add(name, size='all', color='all', density='all', category='any')
    unless File.exist? 'src/main/res'
        puts 'ERROR: Not in an Android project directory root! (no res folder)'
        exit
    end

    things = [ @path,
               expand(category, @categories),
               "drawable-#{expand density, @densities}",
               "ic_#{expand name, ['*']}_#{expand color, @colors}_#{expand size, @sizes}{,dp}.png" ].join '/'

    results = Dir.glob things

    puts "#{results.count} results:"
    puts results.sort.map{ |n| " " * 4 + n[(@path.length + 1)..-1] }
    puts
    puts 'Hit return to add, or ^C to cancel'
    $stdin.readline
    puts 'Adding...'

    @densities.map{ |n| "src/main/res/drawable-#{n}" }.each{ |n| FileUtils.mkdir n unless File.exist? n }

    results.each do |n|
        target = "src/main/res/#{n[(@path.length + 1)..-1].split('/', 2)[1]}"
        puts "#{n} -> #{target}"
        FileUtils.cp n, target
    end
end

def search(*query)
    things = [ @path,
               expand('all', @categories),
               "drawable-#{expand 'all', @densities}",
               "ic_*{#{query.join ','}}*_#{expand 'all', @colors}_#{expand 'all', @sizes}.png" ].join '/'

    results = Dir.glob(things).map{ |n| [ n, n[/ic_(.+)_\w+_\d+dp.png/, 1] ] }.uniq{ |n| n[1] }.sort

    puts "#{results.count} results:"
    if results.count <= 5
        results.each{ |n| puts "\n"; puts n[1]; system "img2txt -W 30 #{n[0]}" }
    else
        results.each{ |n| puts " " * 4 + n[1] }
    end
end

def expand(dong, list)
    return "{#{list.join(',')}}" if %w(all any).include? dong
    return "{#{dong}}"           if dong[',']
    return dong
end

method(ARGV[0].to_s).call(*ARGV.drop(1))
