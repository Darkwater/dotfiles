#!/usr/bin/env ruby

require 'json'
require 'open3'

STEPS = 16
TIME  = 2

mixer  = ARGV[0]
action = ARGV[1]
label  = ARGV[2] || 'Vol'


amixer = %x( amixer sget "#{mixer}" )
md = amixer.match(/Playback (?<vol>\d+) \[(?<volp>\d+)%\] \[(?<voldb>[\d.-]+)dB\] \[(?<enabled>on|off)\]/)

# md contains:
# - vol:     volume in ALSA steps
# - volp:    volume per cent
# - voldb:   volume in relative decibels
# - enabled: gee i dunno

volume = md[:volp].to_f
enabled = md[:enabled] == 'on'

case action
when /up|down/
    step = (volume / 100 * STEPS).round.to_f

    step += 1 if action == 'up'
    step -= 1 if action == 'down'

    volume = (step / STEPS * 100).round

    %x( amixer sset #{mixer} #{volume}% )
when /mute/
    enabled = !enabled

    %x( amixer sset #{mixer} #{enabled ? 'on' : 'off'} )
end

module Progressbits
    { full_left_0:  "\ue27a",
      full_left_1:  "\ue27d",
      full_left_2:  "\ue27e",
      full_left_3:  "\ue27f",
      full_mid_0:   "\ue27b",
      full_mid_1:   "\ue280",
      full_mid_2:   "\ue281",
      full_mid_3:   "\ue282",
      full_right_0: "\ue27c",
      full_right_1: "\ue283",
      full_right_2: "\ue284",
      full_right_3: "\ue285",
      semi_left_0:  "\ue27a",
      semi_left_1:  "\ue286",
      semi_left_2:  "\ue287",
      semi_left_3:  "\ue288",
      semi_mid_0:   "\ue27b",
      semi_mid_1:   "\ue289",
      semi_mid_2:   "\ue28a",
      semi_mid_3:   "\ue28b",
      semi_right_0: "\ue27c",
      semi_right_1: "\ue28c",
      semi_right_2: "\ue28d",
      semi_right_3: "\ue28e" }
    .each_pair do |name, char|
        define_singleton_method(name) { char }
    end
end

def progressbar(progress, width, type = :semi)
    subsegs = (progress * width * 3).round

    (0...width).map do |n|
        part = (n == 0) ? :left : (n == width - 1) ? :right : :mid
        segs = [ 0, subsegs - n * 3, 3 ].sort[1]

        Progressbits.send :"#{type}_#{part}_#{segs}"
    end.join
end


barcolor = enabled ? '' : '%{F#505050}'

screen = JSON.parse(%x( bspc query -m focused -T ))['rectangle']

width = 256
x = screen['x'] + (screen['width'] - width) / 2
y = screen['y'] + (screen['height'] * 0.8).to_i

stdin, stdout, wait = Open3.popen2 *%W( persist volume -t #{TIME} lemonbar -g #{width}x28+#{x}+#{y}
    -F #efefef -B #ef101010
    -f -*-tamsyn-medium-*-*-*-16-*-*-*-*-*-*-*
    -f -*-tamsyn-bold-*-*-*-16-*-*-*-*-*-*-*
    -f -*-siji-medium-*-*-*-10-*-*-*-*-*-*-* )

stdin.puts %Q(%{F-}%{c} #{label}  #{barcolor}#{progressbar(volume.to_f / 100, 16)} )
